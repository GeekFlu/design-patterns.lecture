The SOLID principles focus on achieving code that is maintainable, robust, 
and reusable. 


Single responsibility principle - SRP
	A class should only have one reason to change
	Separation of concerns - different classes handling different, independent task/problems

Open Closed principle - OPC
	Classes should be open for extension but close for modification
	
Liskov substitution principle - LSP
	Functions that use pointers to base classes must be able to use objects of derived classes without knowing it.
	You should be able to substitute a base type for a subtype	
	The principle defines that objects of a superclass shall be replaceable with objects of its subclasses without breaking the application. 
		That requires the objects of your subclasses to behave in the same way as the objects of your superclass. 
		You can achieve that by following a few rules, which are pretty similar to the design by contract concept defined by Bertrand Meyer.
	The Liskov Substitution Principle is the third of Robert C. Martin’s SOLID design principles. It extends the Open/Closed principle and enables you 
		to replace objects of a parent class with objects of a subclass without breaking the application. 
		This requires all subclasses to behave in the same way as the parent class. To achieve that, your subclasses need to follow these rules:
    		Don’t implement any stricter validation rules on input parameters than implemented by the parent class.
    		Apply at the least the same rules to all output parameters as applied by the parent class.
	
	
Interface Segregation principle - ISP
	Do not put too much into an interface; split into separate interfaces, we have to do this
	in order to avoid that client systems start to manage exceptions not implemented exception with things
	that are not being using.
	YAGNI - You Ain't Going To Need It
	Clients should not be forced to depend upon interfaces that they do not use.
		Similar to the Single Responsibility Principle, the goal of the Interface Segregation Principle is to reduce the side effects 
		and frequency of required changes by splitting the software into multiple, independent parts.
	By following this principle, you prevent bloated interfaces that define methods for multiple responsibilities. 
		As explained in the Single Responsibility Principle, you should avoid classes and interfaces with multiple responsibilities 
		because they change often and make your software hard to maintain.
		
		
Dependency Inversion Principle - DPI
	High level modules should not depend on low level modules
	Both should depend on abstractions
	
	The general idea of this principle is as simple as it is important: High-level modules, which provide complex logic, 
		should be easily reusable and unaffected by changes in low-level modules, which provide utility features. 
		To achieve that, you need to introduce an abstraction that decouples the high-level and low-level modules from each other.
	Based on this idea, Robert C. Martin’s definition of the Dependency Inversion Principle consists of two parts:
	    High-level modules should not depend on low-level modules. Both should depend on abstractions.
    	Abstractions should not depend on details. Details should depend on abstractions.
	An important detail of this definition is, that high-level and low-level modules depend on the abstraction. 
		The design principle does not just change the direction of the dependency, as you might have expected when you read its name 
		for the first time. It splits the dependency between the high-level and low-level modules by introducing an abstraction between them. So in the end, you get two dependencies:

    the high-level module depends on the abstraction, and
    the low-level depends on the same abstraction.

    ***** DIP Definition
    	  High-level modules should not depend on low-level modules. Both should depend on abstraction.
          Abstractions should not depend on details. Details should depend on abstractions.
		  
	***** Abstraction and encapsulation are important principles of object-oriented programming.
		  There are many different definitions from many people but let's understand abstraction using the above example.
		  In English, abstraction means something which is non-concrete.
		  In programming terms, the above CustomerBusinessLogic and DataAccess are concrete classes, meaning we can create objects of it.
		  So, abstraction in programming is to create an interface or abstract class which is non-concrete.
		  This means we cannot create an object of interface or abstract class.
		  As per DIP, CustomerBusinessLogic (high-level module) should not depend on concrete DataAccess (low-level module) class.
		  Both classes depend on abstractions, meaning both classes should depend on interface or abstract class.